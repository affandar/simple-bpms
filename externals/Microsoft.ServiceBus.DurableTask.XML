<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceBus.DurableTask</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions">
            <summary>Extension methods for TaskScheduler.</summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.ToSynchronizationContext(System.Threading.Tasks.TaskScheduler)">
            <summary>Gets a SynchronizationContext that targets this TaskScheduler.</summary>
            <param name="scheduler">The target scheduler.</param>
            <returns>A SynchronizationContext that targets this scheduler.</returns>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext">
            <summary>Provides a SynchronizationContext wrapper for a TaskScheduler.</summary>
        </member>
        <member name="F:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the context with the specified scheduler.</summary>
            <param name="scheduler">The scheduler to target.</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Async.TaskSchedulerExtensions.TaskSchedulerSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches a synchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.CompressionSettings.Style">
            <summary>
            Type of compression
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.CompressionSettings.ThresholdInBytes">
            <summary>
            Compression threshold in bytes; if specified by compression criteria, compression will not be done 
            if size is below this value
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery">
            <summary>
            Query class that can be used to filter results from the Orchestration instance store. 
            Instance methods are not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.#ctor">
            <summary>
            Query class that can be used to filter results from the Orchestration instance store. 
            Instance methods are not thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddInstanceFilter(System.String)">
            <summary>
            Adds an exact match instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddInstanceFilter(System.String,System.String)">
            <summary>
            Adds an exact match instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <param name="executionId">Execution Id to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddInstanceFilter(System.String,System.Boolean)">
            <summary>
            Adds an instance id filter on the returned orchestrations
            </summary>
            <param name="instanceId">Instance Id to filter by</param>
            <param name="startsWith">Exact match if set to false, otherwise do a starts-with match</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddNameVersionFilter(System.String)">
            <summary>
            Adds a name filter on the returned orchestrations
            </summary>
            <param name="name">The name of the orchestration to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddNameVersionFilter(System.String,System.String)">
            <summary>
            Adds a name/version filter on the returned orchestations
            </summary>
            <param name="name">The name of the orchestration to filter by</param>
            <param name="version">The version of the orchestration to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddStatusFilter(Microsoft.ServiceBus.DurableTask.OrchestrationStatus)">
            <summary>
            Adds a status filter on the returned orchestrations
            </summary>
            <param name="status">The status to filter by</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery.AddTimeRangeFilter(System.DateTime,System.DateTime,Microsoft.ServiceBus.DurableTask.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Adds a time range filter on the returned orchestrations
            </summary>
            <param name="startTime">Start of the time range to filter by</param>
            <param name="endTime">End of the time range to filter by</param>
            <param name="filterType">Type of orchestration timestamp to apply filter on</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.ServiceBus.DurableTask.TaskActivity" -->
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskActivityDispatcherSettings">
            <summary>
            Settings to configure the Task Activity Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskActivityDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskActivityDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskActivityDispatcherSettings.MaxConcurrentActivities">
            <summary>
            How many activities to process concurrently. Default is 10.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskHubClientSettings">
            <summary>
            Configuration for various TaskHubClient options
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClientSettings.#ctor">
            <summary>
            Create a TaskHubClientSettings object with default settings
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TrackingDispatcherSettings">
            <summary>
            Settings to configure the Tracking Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TrackingDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TrackingDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TrackingDispatcherSettings.MaxConcurrentTrackingSessions">
            <summary>
            How many tracking sessions to process concurrently. Default is 20.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskOrchestrationDispatcherSettings">
            <summary>
            Settings to configure the Task Orchestration Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskOrchestrationDispatcherSettings.TransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a transient error (e.g. communication exception). Default is 10s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskOrchestrationDispatcherSettings.NonTransientErrorBackOffSecs">
            <summary>
            Time in seconds to wait before retrying on a non-transient error. Default is 120s.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskOrchestrationDispatcherSettings.MaxConcurrentOrchestrations">
            <summary>
            How many orchestrations to process concurrently. Default is 100.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskOrchestrationDispatcherSettings.CompressOrchestrationState">
            <summary>
            Compress the orchestration state to enable more complex orchestrations at the cost of throughput. Default is False.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings">
            <summary>
            Configuration for various TaskHubWorker options
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings.#ctor">
            <summary>
            Create a TaskHubWorkerSettings object with default settings
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings.TaskOrchestrationDispatcherSettings">
            <summary>
            Settings to configure the Task Orchestration Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings.TaskActivityDispatcherSettings">
            <summary>
            Settings to configure the Task Activity Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings.TrackingDispatcherSettings">
            <summary>
            Settings to configure the Tracking Dispatcher
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings.MessageCompressionSettings">
            <summary>
            Enable compression of messages. Allows exchange of larger parameters and return values with activities at the cost of additional CPU.
            Default is false.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskHubDescription">
            <summary>
            Configuration for various TaskHub settings
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubDescription.CreateDefaultDescription">
            <summary>
            Creates a TaskHubDescription object with standard settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubDescription.MaxTaskOrchestrationDeliveryCount">
            <summary>
            Maximum number of times the task orchestration dispatcher will try to 
            process an orchestration message before giving up
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubDescription.MaxTaskActivityDeliveryCount">
            <summary>
            Maximum number of times the task activity dispatcher will try to 
            process an orchestration message before giving up
            </summary>
        </member>
        <member name="P:Microsoft.ServiceBus.DurableTask.TaskHubDescription.MaxTrackingDeliveryCount">
            <summary>
            Maximum number of times the tracking dispatcher will try to 
            process an orchestration message before giving up
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskHubWorker">
            <summary>
            Allows users to load the TaskOrchestration and TaskActivity classes and start 
            dispatching to these. Also allows CRUD operations on the Task Hub itself.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.#ctor(System.String,System.String)">
            <summary>
            Create a new TaskHubWorker with given name and Service Bus connection string
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.#ctor(System.String,System.String,Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings)">
            <summary>
            Create a new TaskHubWorker with given name and Service Bus connection string
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new TaskHubWorker with given name, Service Bus and Azure Storage connection string
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
            <param name="tableStoreConnectionString">Azure Storage connection string</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.#ctor(System.String,System.String,System.String,Microsoft.ServiceBus.DurableTask.TaskHubWorkerSettings)">
            <summary>
            Create a new TaskHubWorker with given name, Service Bus and Azure Storage connection string
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
            <param name="tableStoreConnectionString">Azure Storage connection string</param>
            <param name="workerSettings">Settings for various task hub worker options</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.GetTaskHubDescription">
            <summary>
            Gets the TaskHubDescription for the configured TaskHub
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.GetTaskHubDescriptionAsync">
            <summary>
            Gets the TaskHubDescription for the configured TaskHub
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.Start">
            <summary>
            Starts the TaskHubWorker so it begins processing orchestrations and activities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.Stop">
            <summary>
            Gracefully stops the TaskHubWorker
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.Stop(System.Boolean)">
            <summary>
            Stops the TaskHubWorker
            </summary>
            <param name="isForced">True if forced shutdown, false if graceful shutdown</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskOrchestrations(System.Type[])">
            <summary>
            Loads user defined TaskOrchestration classes in the TaskHubWorker
            </summary>
            <param name="taskOrchestrationTypes">Types deriving from TaskOrchestration class</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskOrchestrations(Microsoft.ServiceBus.DurableTask.ObjectCreator{Microsoft.ServiceBus.DurableTask.TaskOrchestration}[])">
            <summary>
            Loads user defined TaskOrchestration classes in the TaskHubWorker
            </summary>
            <param name="taskOrchestrationCreators">User specified ObjectCreators that will 
            create classes deriving TaskOrchestrations with specific names and versions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskActivities(Microsoft.ServiceBus.DurableTask.TaskActivity[])">
            <summary>
            Loads user defined TaskActivity objects in the TaskHubWorker
            </summary>
            <param name="taskActivityObjects">Objects of with TaskActivity base type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskActivities(System.Type[])">
            <summary>
            Loads user defined TaskActivity classes in the TaskHubWorker
            </summary>
            <param name="taskActivityTypes">Types deriving from TaskOrchestration class</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskActivities(Microsoft.ServiceBus.DurableTask.ObjectCreator{Microsoft.ServiceBus.DurableTask.TaskActivity}[])">
            <summary>
            Loads user defined TaskActivity classes in the TaskHubWorker
            </summary>
            <param name="taskActivityCreators">User specified ObjectCreators that will 
            create classes deriving TaskActivity with specific names and versions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskActivitiesFromInterface``1(``0)">
            <summary>
            Infers and adds every method in the specified interface T on the 
            passed in object as a different TaskActivity with Name set to the method name
            and version set to an empty string. Methods can then be invoked from task orchestrations 
            by calling ScheduleTask(name, version) with name as the method name and string.Empty as the version. 
            </summary>
            <typeparam name="T">Interface</typeparam>
            <param name="activities">Object that implements this interface</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.AddTaskActivitiesFromInterface``1(``0,System.Boolean)">
            <summary>
            Infers and adds every method in the specified interface T on the 
            passed in object as a different TaskActivity with Name set to the method name
            and version set to an empty string. Methods can then be invoked from task orchestrations 
            by calling ScheduleTask(name, version) with name as the method name and string.Empty as the version. 
            </summary>
            <typeparam name="T">Interface</typeparam>
            <param name="activities">Object that implements this interface</param>
            <param name="useFullyQualifiedMethodNames">If true, the method name translation from the interface contains 
            the interface name, if false then only the method name is used</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHub">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already existed then 
            it would be deleted and recreated.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHub(System.Boolean)">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already existed then 
            it would be deleted and recreated. Instance store creation can be controlled via parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHub(Microsoft.ServiceBus.DurableTask.TaskHubDescription)">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already existed then 
            it would be deleted and recreated.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHub(Microsoft.ServiceBus.DurableTask.TaskHubDescription,System.Boolean)">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already existed then 
            it would be deleted and recreated. Instance store creation can be controlled via parameter.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHubIfNotExists">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already exists then this is a no-op
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.CreateHubIfNotExists(Microsoft.ServiceBus.DurableTask.TaskHubDescription)">
            <summary>
            Creates all the underlying entities in Service bus and Azure Storage (if specified) for 
            the TaskHubWorker and TaskHubClient's operations. If TaskHub already exists then this is a no-op
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.DeleteHub">
            <summary>
            Deletes all the underlying Service Bus and Azue Storage entities
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.DeleteHub(System.Boolean)">
            <summary>
            Deletes all the underlying Service Bus entities. 
            </summary>
            <param name="deleteInstanceStore">True if Azure Storage entities should also deleted, False otherwise.</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubWorker.HubExists">
            <summary>
            Hub existence check.
            </summary>
            <returns>True if the Task Hub exists, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.JsonCreationConverter`1">
            <summary>
            Helper class for supporting deserialization from JSON into a custom class hierarchy
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.JsonCreationConverter`1.CreateObject(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary> 
            Create an instance of objectType, based properties in the JSON object 
            </summary> 
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateClient``1">
            <summary>
            Create a proxy client class to schedule remote TaskActivities via a strongly typed interface.
            </summary>
            <typeparam name="T">The interface for the proxy client</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateClient``1(System.Boolean)">
            <summary>
            Create a proxy client class to schedule remote TaskActivities via a strongly typed interface.
            </summary>
            <typeparam name="T">The interface for the proxy client</typeparam>
            <param name="useFullyQualifiedMethodNames">If true, the method name translation from the interface contains 
            the interface name, if false then only the method name is used</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateRetryableClient``1(Microsoft.ServiceBus.DurableTask.RetryOptions)" -->
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ScheduleWithRetry``1(System.Type,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object[])">
            <summary>
            Schedule a TaskActivity by type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="taskActivityType">Type that dervices from TaskActivity class</param>
            <param name="retryOptions">Retry policy</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ScheduleWithRetry``1(System.String,System.String,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object[])">
            <summary>
            Schedule a TaskActivity by name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="retryOptions">Retry policy</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.Type,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object)">
            <summary>
            Create a suborchestration of the specified type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.Type,System.String,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object)">
            <summary>
            Create a suborchestration of the specified type. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="instanceId">Instance Id of the suborchestration</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.String,System.String,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object)">
            <summary>
            Create a suborchestration of the specified name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstanceWithRetry``1(System.String,System.String,System.String,Microsoft.ServiceBus.DurableTask.RetryOptions,System.Object)">
            <summary>
            Create a suborchestration of the specified name and version. Also retry on failure as per supplied policy.
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance Id of the suborchestration</param>
            <param name="retryOptions">Retry policy</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ScheduleTask``1(System.Type,System.Object[])">
            <summary>
            Schedule a TaskActivity by type. 
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="taskActivityType">Type that dervices from TaskActivity class</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ScheduleTask``1(System.String,System.String,System.Object[])">
            <summary>
            Schedule a TaskActivity by name and version. 
            </summary>
            <typeparam name="T">Return Type of the TaskActivity.Exeute method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="parameters">Parameters for the TaskActivity.Execute method</param>
            <returns>Task that represents the execution of the specified TaskActivity</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateTimer``1(System.DateTime,``0)">
            <summary>
            Create a timer that will fire at the specified time and hand back the specified state.
            </summary>
            <typeparam name="T">Type of state object</typeparam>
            <param name="fireAt">Absolute time at which the timer should fire</param>
            <param name="state">The state to be handed back when the timer fires</param>
            <returns>Task that represents the async wait on the timer</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateTimer``1(System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Create a timer that will fire at the specified time and hand back the specified state.
            </summary>
            <typeparam name="T">Type of state object</typeparam>
            <param name="fireAt">Absolute time at which the timer should fire</param>
            <param name="state">The state to be handed back when the timer fires</param>
            <param name="cancelToken">Cancellation token</param>
            <returns>Task that represents the async wait on the timer</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstance``1(System.Type,System.Object)">
            <summary>
            Create a suborchestration of the specified type. 
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstance``1(System.Type,System.String,System.Object)">
            <summary>
            Create a suborchestration of the specified type with the specified instance id
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="orchestrationType">Type of the TaskOrchestration derived class to instantiate</param>
            <param name="instanceId">InstanceId of the suborchestration to create</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstance``1(System.String,System.String,System.Object)">
            <summary>
            Create a suborchestration of the specified name and version. 
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.CreateSubOrchestrationInstance``1(System.String,System.String,System.String,System.Object)">
            <summary>
            Create a suborchestration of the specified name and version with the specific instance id
            </summary>
            <typeparam name="T">Return Type of the TaskOrchestration.RunTask method</typeparam>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">InstanceId of the suborchestration to create</param>
            <param name="input">Input for the TaskOrchestration.RunTask method</param>
            <returns>Task that represents the execution of the specified suborchestration</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ContinueAsNew(System.Object)">
            <summary>
            Checkpoint the orchestration instance by completing the current execution in the ContinueAsNew
            state and creating a new execution of this instance with the specified input parameter. 
            This is useful in unbounded workflows to ensure that the execution history gets cleaned up regularly and 
            does not overflow the preset size limit.  
            </summary>
            <param name="input">Input to the new execution of this instance. This is the same type as the one used to start
            the first execution of this orchestration instance.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.ServiceBus.DurableTask.OrchestrationContext.ContinueAsNew(System.String,System.Object)" -->
        <member name="P:Microsoft.ServiceBus.DurableTask.OrchestrationContext.IsReplaying">
            <summary>
            True if the code is currently replaying, False if code is truly executing for the first time.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.RetryOptions">
            <summary>
            Contains retry policies that can be passed as parameters to various operations
            </summary>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskHubClient">
            <summary>
            Client used to manage and query orchestration instances
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.#ctor(System.String,System.String)">
            <summary>
            Create a new TaskHubClient with the given name, service bus connection string and default settings.
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.#ctor(System.String,System.String,Microsoft.ServiceBus.DurableTask.TaskHubClientSettings)">
            <summary>
            Create a new TaskHubClient with given name and service bus connection string with specified settings.
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
            <param name="settings">Client settings</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new TaskHubClient with given name, Service Bus and Azure Storage connection strings with default settings.
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
            <param name="tableStoreConnectionString">Azure Storage connection string</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.#ctor(System.String,System.String,System.String,Microsoft.ServiceBus.DurableTask.TaskHubClientSettings)">
            <summary>
            Create a new TaskHubClient with given name, Service Bus and Azure Storage connection strings  with specified settings.
            </summary>
            <param name="hubName">Name of the Task Hub</param>
            <param name="connectionString">Service Bus connection string</param>
            <param name="tableStoreConnectionString">Azure Storage connection string</param>
            <param name="settings">Client settings</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstance(System.Type,System.Object)">
            <summary>
            Create a new orchestration of the specified type with an automatically generated instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstanceAsync(System.Type,System.Object)">
            <summary>
            Create a new orchestration of the specified type with an automatically generated instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstance(System.Type,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified type with the specified instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstanceAsync(System.Type,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified type with the specified instance id
            </summary>
            <param name="orchestrationType">Type that derives from TaskOrchestration</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstance(System.String,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the TaskOrchestration</param>
            <param name="version">Version of the TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the TaskOrchestration</param>
            <param name="version">Version of the TaskOrchestration</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstance(System.String,System.String,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstance(System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <param name="tags">Dictionary of key/value tags associated with this instance</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.CreateOrchestrationInstanceAsync(System.String,System.String,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a new orchestration of the specified name and version
            </summary>
            <param name="name">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="version">Name of the orchestration as specified by the ObjectCreator</param>
            <param name="instanceId">Instance id for the orchestration to be created, must be unique across the Task Hub</param>
            <param name="input">Input parameter to the specified TaskOrchestration</param>
            <param name="tags">Dictionary of key/value tags associated with this instance</param>
            <returns>OrchestrationInstance that represents the orchestration that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.RaiseEvent(Microsoft.ServiceBus.DurableTask.OrchestrationInstance,System.String,System.Object)">
            <summary>
            Raises an event in the specified orchestration instance, which eventually causes the OnEvent() method in the orchestration to fire.
            </summary>
            <param name="orchestrationInstance">Instance in which to raise the event</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.RaiseEventAsync(Microsoft.ServiceBus.DurableTask.OrchestrationInstance,System.String,System.Object)">
            <summary>
            Raises an event in the specified orchestration instance, which eventually causes the OnEvent() method in the orchestration to fire.
            </summary>
            <param name="orchestrationInstance">Instance in which to raise the event</param>
            <param name="eventName">Name of the event</param>
            <param name="eventData">Data for the event</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.TerminateInstance(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Forcefully terminate the specified orchestration instance
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.TerminateInstanceAsync(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Forcefully terminate the specified orchestration instance
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.TerminateInstance(Microsoft.ServiceBus.DurableTask.OrchestrationInstance,System.String)">
            <summary>
            Forcefully terminate the specified orchestration instance with a reason
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
            <param name="reason">Reason for terminating the instance</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.TerminateInstanceAsync(Microsoft.ServiceBus.DurableTask.OrchestrationInstance,System.String)">
            <summary>
            Forcefully terminate the specified orchestration instance with a reason
            </summary>
            <param name="orchestrationInstance">Instance to terminate</param>
            <param name="reason">Reason for terminating the instance</param>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationState">
            <summary>
            Get a list of orchestration states from the instance storage table. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <returns>List of OrchestrationState objects that represents the list of 
            orchestrations in the instance store</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationStateAsync">
            <summary>
            Get a list of orchestration states from the instance storage table. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <returns>List of OrchestrationState objects that represents the list of 
            orchestrations in the instance store</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationState(System.String)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            most current execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationStateAsync(System.String)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            most current execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStates(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery)">
            <summary>
            Get a list of orchestration states from the instance storage table which match the specified 
            orchestration state query.
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStatesAsync(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery)">
            <summary>
            Get a list of orchestration states from the instance storage table which match the specified 
            orchestration state query.
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStatesSegmented(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery,System.String)">
            <summary>
            Get a segmented list of orchestration states from the instance storage table which match the specified 
            orchestration state query. Segment size is controlled by the service.  
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <param name="continuationToken">The token returned from the last query execution. Can be null for the first time.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStatesSegmentedAsync(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery,System.String)">
            <summary>
            Get a segmented list of orchestration states from the instance storage table which match the specified 
            orchestration state query. Segment size is controlled by the service.  
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <param name="continuationToken">The token returned from the last query execution. Can be null for the first time.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStatesSegmented(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery,System.String,System.Int32)">
            <summary>
            Get a segmented list of orchestration states from the instance storage table which match the specified 
            orchestration state query.
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <param name="continuationToken">The token returned from the last query execution. Can be null for the first time.</param>
            <param name="count">Count of elements to return. Service will decide how many to return if set to -1.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.QueryOrchestrationStatesSegmentedAsync(Microsoft.ServiceBus.DurableTask.OrchestrationStateQuery,System.String,System.Int32)">
            <summary>
            Get a segmented list of orchestration states from the instance storage table which match the specified 
            orchestration state query.
            </summary>
            <param name="stateQuery">Orchestration state query to execute</param>
            <param name="continuationToken">The token returned from the last query execution. Can be null for the first time.</param>
            <param name="count">Count of elements to return. Service will decide how many to return if set to -1.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationState(System.String,System.Boolean)">
            <summary>
            Get a list of orchestration states from the instance storage table for either the most current
            or all executions (generations) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="allExecutions">True if method should fetch all executions of the instance, 
            false if the method should only fetch the most recent execution</param>
            <returns>List of OrchestrationState objects that represents the list of 
            orchestrations in the instance store</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationStateAsync(System.String,System.Boolean)">
            <summary>
            Get a list of orchestration states from the instance storage table for either the most current
            or all executions (generations) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="allExecutions">True if method should fetch all executions of the instance, 
            false if the method should only fetch the most recent execution</param>
            <returns>List of OrchestrationState objects that represents the list of 
            orchestrations in the instance store</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationState(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            most current execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instance">Instance</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationStateAsync(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            most current execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instance">Instance</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationState(System.String,System.String)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            specified execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="executionId">Exectuion id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationStateAsync(System.String,System.String)">
            <summary>
            Get a list of orchestration states from the instance storage table for the 
            specified execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instanceId">Instance id</param>
            <param name="executionId">Exectuion id</param>
            <returns>The OrchestrationState of the specified instanceId or null if not found</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationHistory(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Get a string dump of the execution history of the specified orchestration instance 
            specified execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instance">Instance</param>
            <returns>String with formatted JSON representing the execution history</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetOrchestrationHistoryAsync(Microsoft.ServiceBus.DurableTask.OrchestrationInstance)">
            <summary>
            Get a string dump of the execution history of the specified orchestration instance 
            specified execution (generation) of the specified instance. 
            Throws if an Azure Storage account was not specified in the constructor.
            </summary>
            <param name="instance">Instance</param>
            <returns>String with formatted JSON representing the execution history</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.PurgeOrchestrationInstanceHistoryAsync(System.DateTime,Microsoft.ServiceBus.DurableTask.OrchestrationStateTimeRangeFilterType)">
            <summary>
            Purges orchestration instance state and history for orchestrations older than the specified threshold time.
            </summary>
            <param name="thresholdDateTimeUtc">Threshold date time in UTC</param>
            <param name="timeRangeFilterType">What to compare the threshold date time against</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetPendingOrchestrationsCount">
            <summary>
            Get the count of pending orchestrations in the TaskHub
            </summary>
            <returns>Count of pending orchestrations</returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.TaskHubClient.GetPendingWorkItemsCount">
            <summary>
            Get the count of pending work items (activities) in the TaskHub
            </summary>
            <returns>Count of pending activities</returns>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.AsyncTaskActivity`2">
            <summary>
            Typed base class for creating typed async task activities
            </summary>
            <typeparam name="TInput">Input type for the activity</typeparam>
            <typeparam name="TResult">Output type of the activity</typeparam>
        </member>
        <member name="T:Microsoft.ServiceBus.DurableTask.TaskActivity`2">
            <summary>
            Typed base class for creating typed sync task activities
            </summary>
            <typeparam name="TInput">Input type for the activity</typeparam>
            <typeparam name="TResult">Output type of the activity</typeparam>
        </member>
        <member name="F:Microsoft.ServiceBus.DurableTask.CompressionStyle.Legacy">
            <summary>
            Revert to pre-message compression behavior (not recommended)
            </summary>
        </member>
        <member name="F:Microsoft.ServiceBus.DurableTask.CompressionStyle.Never">
            <summary>
            Never compress messages
            </summary>
        </member>
        <member name="F:Microsoft.ServiceBus.DurableTask.CompressionStyle.Always">
            <summary>
            Always compress messages
            </summary>
        </member>
        <member name="F:Microsoft.ServiceBus.DurableTask.CompressionStyle.Threshold">
            <summary>
            Only compress messages if they are above the threshold 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Utils.GetCompressedStream(System.IO.Stream)">
            <summary>
            Caller disposes the returned stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceBus.DurableTask.Utils.GetDecompressedStreamAsync(System.IO.Stream)">
            <summary>
            Caller disposes the returned stream
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
